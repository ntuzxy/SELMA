// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tn_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tn_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tn {

namespace {

const ::google::protobuf::Descriptor* Tracker_Min_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tracker_Min_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tracker_Max_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tracker_Max_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tracker_Status_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tracker_Status_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Confidence_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Confidence_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tn_5fmessage_2eproto() {
  protobuf_AddDesc_tn_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tn_message.proto");
  GOOGLE_CHECK(file != NULL);
  Tracker_Min_Update_descriptor_ = file->message_type(0);
  static const int Tracker_Min_Update_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Min_Update, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Min_Update, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Min_Update, y_),
  };
  Tracker_Min_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tracker_Min_Update_descriptor_,
      Tracker_Min_Update::default_instance_,
      Tracker_Min_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Min_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Min_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tracker_Min_Update));
  Tracker_Max_Update_descriptor_ = file->message_type(1);
  static const int Tracker_Max_Update_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Max_Update, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Max_Update, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Max_Update, y_),
  };
  Tracker_Max_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tracker_Max_Update_descriptor_,
      Tracker_Max_Update::default_instance_,
      Tracker_Max_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Max_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Max_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tracker_Max_Update));
  Tracker_Status_Update_descriptor_ = file->message_type(2);
  static const int Tracker_Status_Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Status_Update, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Status_Update, is_active_),
  };
  Tracker_Status_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tracker_Status_Update_descriptor_,
      Tracker_Status_Update::default_instance_,
      Tracker_Status_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Status_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker_Status_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tracker_Status_Update));
  Confidence_Update_descriptor_ = file->message_type(3);
  static const int Confidence_Update_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, human_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, wheeled_veh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, tracked_veh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, van_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, bike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, bus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, truck_),
  };
  Confidence_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Confidence_Update_descriptor_,
      Confidence_Update::default_instance_,
      Confidence_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Confidence_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Confidence_Update));
  Message_descriptor_ = file->message_type(4);
  static const int Message_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, t_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, t_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, t_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, conf_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_Type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tn_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tracker_Min_Update_descriptor_, &Tracker_Min_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tracker_Max_Update_descriptor_, &Tracker_Max_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tracker_Status_Update_descriptor_, &Tracker_Status_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Confidence_Update_descriptor_, &Confidence_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tn_5fmessage_2eproto() {
  delete Tracker_Min_Update::default_instance_;
  delete Tracker_Min_Update_reflection_;
  delete Tracker_Max_Update::default_instance_;
  delete Tracker_Max_Update_reflection_;
  delete Tracker_Status_Update::default_instance_;
  delete Tracker_Status_Update_reflection_;
  delete Confidence_Update::default_instance_;
  delete Confidence_Update_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_tn_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020tn_message.proto\022\002tn\"6\n\022Tracker_Min_Up"
    "date\022\n\n\002id\030\001 \002(\005\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\"6"
    "\n\022Tracker_Max_Update\022\n\n\002id\030\001 \002(\005\022\t\n\001x\030\002 "
    "\002(\005\022\t\n\001y\030\003 \002(\005\"6\n\025Tracker_Status_Update\022"
    "\n\n\002id\030\001 \002(\005\022\021\n\tis_active\030\002 \002(\010\"\255\001\n\021Confi"
    "dence_Update\022\n\n\002id\030\001 \002(\r\022\017\n\007unknown\030\002 \002("
    "\r\022\r\n\005human\030\003 \002(\r\022\023\n\013wheeled_veh\030\004 \002(\r\022\023\n"
    "\013tracked_veh\030\005 \002(\r\022\013\n\003car\030\006 \002(\r\022\013\n\003van\030\007"
    " \002(\r\022\014\n\004bike\030\010 \002(\r\022\013\n\003bus\030\t \002(\r\022\r\n\005truck"
    "\030\n \002(\r\"\315\001\n\007Message\022\"\n\010msg_type\030\001 \002(\0162\020.t"
    "n.Message_Type\022%\n\005t_min\030\002 \001(\0132\026.tn.Track"
    "er_Min_Update\022%\n\005t_max\030\003 \001(\0132\026.tn.Tracke"
    "r_Max_Update\022+\n\010t_status\030\004 \001(\0132\031.tn.Trac"
    "ker_Status_Update\022#\n\004conf\030\005 \001(\0132\025.tn.Con"
    "fidence_Update*9\n\014Message_Type\022\010\n\004TMin\020\000"
    "\022\010\n\004TMax\020\001\022\013\n\007TStatus\020\002\022\010\n\004Conf\020\003", 633);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tn_message.proto", &protobuf_RegisterTypes);
  Tracker_Min_Update::default_instance_ = new Tracker_Min_Update();
  Tracker_Max_Update::default_instance_ = new Tracker_Max_Update();
  Tracker_Status_Update::default_instance_ = new Tracker_Status_Update();
  Confidence_Update::default_instance_ = new Confidence_Update();
  Message::default_instance_ = new Message();
  Tracker_Min_Update::default_instance_->InitAsDefaultInstance();
  Tracker_Max_Update::default_instance_->InitAsDefaultInstance();
  Tracker_Status_Update::default_instance_->InitAsDefaultInstance();
  Confidence_Update::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tn_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tn_5fmessage_2eproto {
  StaticDescriptorInitializer_tn_5fmessage_2eproto() {
    protobuf_AddDesc_tn_5fmessage_2eproto();
  }
} static_descriptor_initializer_tn_5fmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Type_descriptor_;
}
bool Message_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Tracker_Min_Update::kIdFieldNumber;
const int Tracker_Min_Update::kXFieldNumber;
const int Tracker_Min_Update::kYFieldNumber;
#endif  // !_MSC_VER

Tracker_Min_Update::Tracker_Min_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tracker_Min_Update::InitAsDefaultInstance() {
}

Tracker_Min_Update::Tracker_Min_Update(const Tracker_Min_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tracker_Min_Update::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tracker_Min_Update::~Tracker_Min_Update() {
  SharedDtor();
}

void Tracker_Min_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tracker_Min_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tracker_Min_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tracker_Min_Update_descriptor_;
}

const Tracker_Min_Update& Tracker_Min_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tn_5fmessage_2eproto();
  return *default_instance_;
}

Tracker_Min_Update* Tracker_Min_Update::default_instance_ = NULL;

Tracker_Min_Update* Tracker_Min_Update::New() const {
  return new Tracker_Min_Update;
}

void Tracker_Min_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tracker_Min_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tracker_Min_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tracker_Min_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tracker_Min_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tracker_Min_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tracker_Min_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tracker_Min_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tracker_Min_Update::MergeFrom(const Tracker_Min_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tracker_Min_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tracker_Min_Update::CopyFrom(const Tracker_Min_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tracker_Min_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Tracker_Min_Update::Swap(Tracker_Min_Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tracker_Min_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tracker_Min_Update_descriptor_;
  metadata.reflection = Tracker_Min_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tracker_Max_Update::kIdFieldNumber;
const int Tracker_Max_Update::kXFieldNumber;
const int Tracker_Max_Update::kYFieldNumber;
#endif  // !_MSC_VER

Tracker_Max_Update::Tracker_Max_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tracker_Max_Update::InitAsDefaultInstance() {
}

Tracker_Max_Update::Tracker_Max_Update(const Tracker_Max_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tracker_Max_Update::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tracker_Max_Update::~Tracker_Max_Update() {
  SharedDtor();
}

void Tracker_Max_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tracker_Max_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tracker_Max_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tracker_Max_Update_descriptor_;
}

const Tracker_Max_Update& Tracker_Max_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tn_5fmessage_2eproto();
  return *default_instance_;
}

Tracker_Max_Update* Tracker_Max_Update::default_instance_ = NULL;

Tracker_Max_Update* Tracker_Max_Update::New() const {
  return new Tracker_Max_Update;
}

void Tracker_Max_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tracker_Max_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tracker_Max_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tracker_Max_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tracker_Max_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tracker_Max_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tracker_Max_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tracker_Max_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tracker_Max_Update::MergeFrom(const Tracker_Max_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tracker_Max_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tracker_Max_Update::CopyFrom(const Tracker_Max_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tracker_Max_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Tracker_Max_Update::Swap(Tracker_Max_Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tracker_Max_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tracker_Max_Update_descriptor_;
  metadata.reflection = Tracker_Max_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tracker_Status_Update::kIdFieldNumber;
const int Tracker_Status_Update::kIsActiveFieldNumber;
#endif  // !_MSC_VER

Tracker_Status_Update::Tracker_Status_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tracker_Status_Update::InitAsDefaultInstance() {
}

Tracker_Status_Update::Tracker_Status_Update(const Tracker_Status_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tracker_Status_Update::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  is_active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tracker_Status_Update::~Tracker_Status_Update() {
  SharedDtor();
}

void Tracker_Status_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tracker_Status_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tracker_Status_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tracker_Status_Update_descriptor_;
}

const Tracker_Status_Update& Tracker_Status_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tn_5fmessage_2eproto();
  return *default_instance_;
}

Tracker_Status_Update* Tracker_Status_Update::default_instance_ = NULL;

Tracker_Status_Update* Tracker_Status_Update::New() const {
  return new Tracker_Status_Update;
}

void Tracker_Status_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    is_active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tracker_Status_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_active;
        break;
      }

      // required bool is_active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tracker_Status_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool is_active = 2;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tracker_Status_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool is_active = 2;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tracker_Status_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool is_active = 2;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tracker_Status_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tracker_Status_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tracker_Status_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tracker_Status_Update::MergeFrom(const Tracker_Status_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tracker_Status_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tracker_Status_Update::CopyFrom(const Tracker_Status_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tracker_Status_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Tracker_Status_Update::Swap(Tracker_Status_Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tracker_Status_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tracker_Status_Update_descriptor_;
  metadata.reflection = Tracker_Status_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Confidence_Update::kIdFieldNumber;
const int Confidence_Update::kUnknownFieldNumber;
const int Confidence_Update::kHumanFieldNumber;
const int Confidence_Update::kWheeledVehFieldNumber;
const int Confidence_Update::kTrackedVehFieldNumber;
const int Confidence_Update::kCarFieldNumber;
const int Confidence_Update::kVanFieldNumber;
const int Confidence_Update::kBikeFieldNumber;
const int Confidence_Update::kBusFieldNumber;
const int Confidence_Update::kTruckFieldNumber;
#endif  // !_MSC_VER

Confidence_Update::Confidence_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Confidence_Update::InitAsDefaultInstance() {
}

Confidence_Update::Confidence_Update(const Confidence_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Confidence_Update::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  unknown_ = 0u;
  human_ = 0u;
  wheeled_veh_ = 0u;
  tracked_veh_ = 0u;
  car_ = 0u;
  van_ = 0u;
  bike_ = 0u;
  bus_ = 0u;
  truck_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Confidence_Update::~Confidence_Update() {
  SharedDtor();
}

void Confidence_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Confidence_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Confidence_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Confidence_Update_descriptor_;
}

const Confidence_Update& Confidence_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tn_5fmessage_2eproto();
  return *default_instance_;
}

Confidence_Update* Confidence_Update::default_instance_ = NULL;

Confidence_Update* Confidence_Update::New() const {
  return new Confidence_Update;
}

void Confidence_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    unknown_ = 0u;
    human_ = 0u;
    wheeled_veh_ = 0u;
    tracked_veh_ = 0u;
    car_ = 0u;
    van_ = 0u;
    bike_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bus_ = 0u;
    truck_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Confidence_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unknown;
        break;
      }

      // required uint32 unknown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_)));
          set_has_unknown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_human;
        break;
      }

      // required uint32 human = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_human:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &human_)));
          set_has_human();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wheeled_veh;
        break;
      }

      // required uint32 wheeled_veh = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wheeled_veh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wheeled_veh_)));
          set_has_wheeled_veh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tracked_veh;
        break;
      }

      // required uint32 tracked_veh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracked_veh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracked_veh_)));
          set_has_tracked_veh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_car;
        break;
      }

      // required uint32 car = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_car:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &car_)));
          set_has_car();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_van;
        break;
      }

      // required uint32 van = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_van:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &van_)));
          set_has_van();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bike;
        break;
      }

      // required uint32 bike = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bike_)));
          set_has_bike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bus;
        break;
      }

      // required uint32 bus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_)));
          set_has_bus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_truck;
        break;
      }

      // required uint32 truck = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_truck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &truck_)));
          set_has_truck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Confidence_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 unknown = 2;
  if (has_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown(), output);
  }

  // required uint32 human = 3;
  if (has_human()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->human(), output);
  }

  // required uint32 wheeled_veh = 4;
  if (has_wheeled_veh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wheeled_veh(), output);
  }

  // required uint32 tracked_veh = 5;
  if (has_tracked_veh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tracked_veh(), output);
  }

  // required uint32 car = 6;
  if (has_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->car(), output);
  }

  // required uint32 van = 7;
  if (has_van()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->van(), output);
  }

  // required uint32 bike = 8;
  if (has_bike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bike(), output);
  }

  // required uint32 bus = 9;
  if (has_bus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bus(), output);
  }

  // required uint32 truck = 10;
  if (has_truck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->truck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Confidence_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 unknown = 2;
  if (has_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unknown(), target);
  }

  // required uint32 human = 3;
  if (has_human()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->human(), target);
  }

  // required uint32 wheeled_veh = 4;
  if (has_wheeled_veh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wheeled_veh(), target);
  }

  // required uint32 tracked_veh = 5;
  if (has_tracked_veh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tracked_veh(), target);
  }

  // required uint32 car = 6;
  if (has_car()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->car(), target);
  }

  // required uint32 van = 7;
  if (has_van()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->van(), target);
  }

  // required uint32 bike = 8;
  if (has_bike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bike(), target);
  }

  // required uint32 bus = 9;
  if (has_bus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bus(), target);
  }

  // required uint32 truck = 10;
  if (has_truck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->truck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Confidence_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 unknown = 2;
    if (has_unknown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown());
    }

    // required uint32 human = 3;
    if (has_human()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->human());
    }

    // required uint32 wheeled_veh = 4;
    if (has_wheeled_veh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wheeled_veh());
    }

    // required uint32 tracked_veh = 5;
    if (has_tracked_veh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracked_veh());
    }

    // required uint32 car = 6;
    if (has_car()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->car());
    }

    // required uint32 van = 7;
    if (has_van()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->van());
    }

    // required uint32 bike = 8;
    if (has_bike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bike());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 bus = 9;
    if (has_bus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus());
    }

    // required uint32 truck = 10;
    if (has_truck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->truck());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Confidence_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Confidence_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Confidence_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Confidence_Update::MergeFrom(const Confidence_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unknown()) {
      set_unknown(from.unknown());
    }
    if (from.has_human()) {
      set_human(from.human());
    }
    if (from.has_wheeled_veh()) {
      set_wheeled_veh(from.wheeled_veh());
    }
    if (from.has_tracked_veh()) {
      set_tracked_veh(from.tracked_veh());
    }
    if (from.has_car()) {
      set_car(from.car());
    }
    if (from.has_van()) {
      set_van(from.van());
    }
    if (from.has_bike()) {
      set_bike(from.bike());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bus()) {
      set_bus(from.bus());
    }
    if (from.has_truck()) {
      set_truck(from.truck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Confidence_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Confidence_Update::CopyFrom(const Confidence_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Confidence_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Confidence_Update::Swap(Confidence_Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unknown_, other->unknown_);
    std::swap(human_, other->human_);
    std::swap(wheeled_veh_, other->wheeled_veh_);
    std::swap(tracked_veh_, other->tracked_veh_);
    std::swap(car_, other->car_);
    std::swap(van_, other->van_);
    std::swap(bike_, other->bike_);
    std::swap(bus_, other->bus_);
    std::swap(truck_, other->truck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Confidence_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Confidence_Update_descriptor_;
  metadata.reflection = Confidence_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kMsgTypeFieldNumber;
const int Message::kTMinFieldNumber;
const int Message::kTMaxFieldNumber;
const int Message::kTStatusFieldNumber;
const int Message::kConfFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  t_min_ = const_cast< ::tn::Tracker_Min_Update*>(&::tn::Tracker_Min_Update::default_instance());
  t_max_ = const_cast< ::tn::Tracker_Max_Update*>(&::tn::Tracker_Max_Update::default_instance());
  t_status_ = const_cast< ::tn::Tracker_Status_Update*>(&::tn::Tracker_Status_Update::default_instance());
  conf_ = const_cast< ::tn::Confidence_Update*>(&::tn::Confidence_Update::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  t_min_ = NULL;
  t_max_ = NULL;
  t_status_ = NULL;
  conf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete t_min_;
    delete t_max_;
    delete t_status_;
    delete conf_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tn_5fmessage_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    if (has_t_min()) {
      if (t_min_ != NULL) t_min_->::tn::Tracker_Min_Update::Clear();
    }
    if (has_t_max()) {
      if (t_max_ != NULL) t_max_->::tn::Tracker_Max_Update::Clear();
    }
    if (has_t_status()) {
      if (t_status_ != NULL) t_status_->::tn::Tracker_Status_Update::Clear();
    }
    if (has_conf()) {
      if (conf_ != NULL) conf_->::tn::Confidence_Update::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tn.Message_Type msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tn::Message_Type_IsValid(value)) {
            set_msg_type(static_cast< ::tn::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_t_min;
        break;
      }

      // optional .tn.Tracker_Min_Update t_min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_min:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_min()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_t_max;
        break;
      }

      // optional .tn.Tracker_Max_Update t_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_max()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_t_status;
        break;
      }

      // optional .tn.Tracker_Status_Update t_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_conf;
        break;
      }

      // optional .tn.Confidence_Update conf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tn.Message_Type msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional .tn.Tracker_Min_Update t_min = 2;
  if (has_t_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->t_min(), output);
  }

  // optional .tn.Tracker_Max_Update t_max = 3;
  if (has_t_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->t_max(), output);
  }

  // optional .tn.Tracker_Status_Update t_status = 4;
  if (has_t_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->t_status(), output);
  }

  // optional .tn.Confidence_Update conf = 5;
  if (has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->conf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tn.Message_Type msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional .tn.Tracker_Min_Update t_min = 2;
  if (has_t_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->t_min(), target);
  }

  // optional .tn.Tracker_Max_Update t_max = 3;
  if (has_t_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->t_max(), target);
  }

  // optional .tn.Tracker_Status_Update t_status = 4;
  if (has_t_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->t_status(), target);
  }

  // optional .tn.Confidence_Update conf = 5;
  if (has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->conf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tn.Message_Type msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional .tn.Tracker_Min_Update t_min = 2;
    if (has_t_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t_min());
    }

    // optional .tn.Tracker_Max_Update t_max = 3;
    if (has_t_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t_max());
    }

    // optional .tn.Tracker_Status_Update t_status = 4;
    if (has_t_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t_status());
    }

    // optional .tn.Confidence_Update conf = 5;
    if (has_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_t_min()) {
      mutable_t_min()->::tn::Tracker_Min_Update::MergeFrom(from.t_min());
    }
    if (from.has_t_max()) {
      mutable_t_max()->::tn::Tracker_Max_Update::MergeFrom(from.t_max());
    }
    if (from.has_t_status()) {
      mutable_t_status()->::tn::Tracker_Status_Update::MergeFrom(from.t_status());
    }
    if (from.has_conf()) {
      mutable_conf()->::tn::Confidence_Update::MergeFrom(from.conf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_t_min()) {
    if (!this->t_min().IsInitialized()) return false;
  }
  if (has_t_max()) {
    if (!this->t_max().IsInitialized()) return false;
  }
  if (has_t_status()) {
    if (!this->t_status().IsInitialized()) return false;
  }
  if (has_conf()) {
    if (!this->conf().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(t_min_, other->t_min_);
    std::swap(t_max_, other->t_max_);
    std::swap(t_status_, other->t_status_);
    std::swap(conf_, other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tn

// @@protoc_insertion_point(global_scope)
